generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data.db"
}

model Post {
  id               Int             @id @default(autoincrement())
  title            String?
  slug             String          @unique
  summary          String?
  text             String?
  published        Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  publishedAt      DateTime?
  author           Author?         @relation(fields: [authorId], references: [id])
  authorId         Int?
  category         Category?       @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  tags             Tag[]
  coverImage       String?
  url              String?
  language         String?
  sourceCountry    String?
  images           Image[]
  status           PostStatus      @default(DRAFT)
  transformation   Transformation? @relation("TransformationToPost", fields: [transformationId], references: [id])
  transformationId Int?
  articleSeed      ArticleSeed?    @relation("ArticleSeedToPost", fields: [articleSeedId], references: [id])
  articleSeedId    Int?
}

enum PostStatus {
  DRAFT
  QUEUED
  PROCESSING
  COMPLETED
  PUBLISHED
  ARCHIVED
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  email     String   @unique
  bio       String?
  avatar    String?
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  posts       Post[]
  articles    Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  posts     Post[]
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  caption   String?
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleSeed {
  id         Int       @id @default(autoincrement())
  externalId String?
  seedData   String?
  seedJob    Job?      @relation(fields: [seedJobId], references: [id])
  seedJobId  Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  articles   Article[] @relation("ArticleSeedToArticle")
  posts      Post[]    @relation("ArticleSeedToPost")
}

model Article {
  id            Int          @id @default(autoincrement())
  slug          String       @unique
  title         String
  text          String?
  summary       String?
  url           String?
  image         String?
  video         String?
  author        String?
  language      String?
  sourceCountry String?
  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  tags          Tag[]
  published     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  publishedAt   DateTime?
  articleSeed   ArticleSeed? @relation("ArticleSeedToArticle", fields: [articleSeedId], references: [id])
  articleSeedId Int?
}

enum JobStatus {
  READY
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

enum JobType {
  FETCH_TOP_NEWS
  REFINE_ARTICLES
  TRANSFORM_ARTICLES
}

model Job {
  id           Int           @id @default(autoincrement())
  type         JobType
  params       String?
  status       JobStatus
  data         String?
  createdAt    DateTime      @default(now())
  articleSeeds ArticleSeed[]
}

model Transformation {
  id        Int      @id @default(autoincrement())
  name      String
  params    String?
  createdAt DateTime @default(now())
  posts     Post[]   @relation("TransformationToPost")
}
